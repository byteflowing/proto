// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: captcha/v1/captcha.proto

package captchav1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/byteflowing/proto/gen/go/enums/v1"
	v13 "github.com/byteflowing/proto/gen/go/limiter/v1"
	v12 "github.com/byteflowing/proto/gen/go/mail/v1"
	v11 "github.com/byteflowing/proto/gen/go/sms/v1"
	v14 "github.com/byteflowing/proto/gen/go/types/v1"
	_ "github.com/byteflowing/proto/gen/go/validation/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendCaptchaReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 发送验证的程序
	// sms, email等等
	SenderType v1.MessageSenderType `protobuf:"varint,1,opt,name=sender_type,json=senderType,proto3,enum=enums.v1.MessageSenderType" json:"sender_type,omitempty"`
	// 验证码内容
	Captcha string `protobuf:"bytes,2,opt,name=captcha,proto3" json:"captcha,omitempty"`
	// 验证码类型，业务方定义
	CaptchaType string `protobuf:"bytes,3,opt,name=captcha_type,json=captchaType,proto3" json:"captcha_type,omitempty"`
	// Types that are valid to be assigned to Sender:
	//
	//	*SendCaptchaReq_Sms
	//	*SendCaptchaReq_Mail
	Sender        isSendCaptchaReq_Sender `protobuf_oneof:"sender"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCaptchaReq) Reset() {
	*x = SendCaptchaReq{}
	mi := &file_captcha_v1_captcha_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCaptchaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCaptchaReq) ProtoMessage() {}

func (x *SendCaptchaReq) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_v1_captcha_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCaptchaReq.ProtoReflect.Descriptor instead.
func (*SendCaptchaReq) Descriptor() ([]byte, []int) {
	return file_captcha_v1_captcha_proto_rawDescGZIP(), []int{0}
}

func (x *SendCaptchaReq) GetSenderType() v1.MessageSenderType {
	if x != nil {
		return x.SenderType
	}
	return v1.MessageSenderType(0)
}

func (x *SendCaptchaReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *SendCaptchaReq) GetCaptchaType() string {
	if x != nil {
		return x.CaptchaType
	}
	return ""
}

func (x *SendCaptchaReq) GetSender() isSendCaptchaReq_Sender {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *SendCaptchaReq) GetSms() *v11.SendSmsReq {
	if x != nil {
		if x, ok := x.Sender.(*SendCaptchaReq_Sms); ok {
			return x.Sms
		}
	}
	return nil
}

func (x *SendCaptchaReq) GetMail() *v12.SendMailReq {
	if x != nil {
		if x, ok := x.Sender.(*SendCaptchaReq_Mail); ok {
			return x.Mail
		}
	}
	return nil
}

type isSendCaptchaReq_Sender interface {
	isSendCaptchaReq_Sender()
}

type SendCaptchaReq_Sms struct {
	// 如果sender_type是sms使用这个
	Sms *v11.SendSmsReq `protobuf:"bytes,4,opt,name=sms,proto3,oneof"`
}

type SendCaptchaReq_Mail struct {
	// 如果sender_type是mail使用这个
	Mail *v12.SendMailReq `protobuf:"bytes,5,opt,name=mail,proto3,oneof"`
}

func (*SendCaptchaReq_Sms) isSendCaptchaReq_Sender() {}

func (*SendCaptchaReq_Mail) isSendCaptchaReq_Sender() {}

type SendCaptchaResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 验证码存取的key，使用这个key在kv存储中找验证码
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// 如果报错，这里有限制的原因
	Limit         *v13.LimitRule `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCaptchaResp) Reset() {
	*x = SendCaptchaResp{}
	mi := &file_captcha_v1_captcha_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCaptchaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCaptchaResp) ProtoMessage() {}

func (x *SendCaptchaResp) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_v1_captcha_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCaptchaResp.ProtoReflect.Descriptor instead.
func (*SendCaptchaResp) Descriptor() ([]byte, []int) {
	return file_captcha_v1_captcha_proto_rawDescGZIP(), []int{1}
}

func (x *SendCaptchaResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SendCaptchaResp) GetLimit() *v13.LimitRule {
	if x != nil {
		return x.Limit
	}
	return nil
}

type VerifyCaptchaReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 验证码发送程序
	SenderType v1.MessageSenderType `protobuf:"varint,1,opt,name=sender_type,json=senderType,proto3,enum=enums.v1.MessageSenderType" json:"sender_type,omitempty"`
	// 发送验证码时返回的token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// 验证码
	Captcha string `protobuf:"bytes,3,opt,name=captcha,proto3" json:"captcha,omitempty"`
	// 验证码类型，业务方定义
	CaptchaType string `protobuf:"bytes,4,opt,name=captcha_type,json=captchaType,proto3" json:"captcha_type,omitempty"`
	// 发送验证码的手机号或者邮箱等账号，根据sender_type来填写对应的号码
	//
	// Types that are valid to be assigned to Number:
	//
	//	*VerifyCaptchaReq_PhoneNumber
	//	*VerifyCaptchaReq_Email
	Number        isVerifyCaptchaReq_Number `protobuf_oneof:"number"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyCaptchaReq) Reset() {
	*x = VerifyCaptchaReq{}
	mi := &file_captcha_v1_captcha_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyCaptchaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCaptchaReq) ProtoMessage() {}

func (x *VerifyCaptchaReq) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_v1_captcha_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCaptchaReq.ProtoReflect.Descriptor instead.
func (*VerifyCaptchaReq) Descriptor() ([]byte, []int) {
	return file_captcha_v1_captcha_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyCaptchaReq) GetSenderType() v1.MessageSenderType {
	if x != nil {
		return x.SenderType
	}
	return v1.MessageSenderType(0)
}

func (x *VerifyCaptchaReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VerifyCaptchaReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *VerifyCaptchaReq) GetCaptchaType() string {
	if x != nil {
		return x.CaptchaType
	}
	return ""
}

func (x *VerifyCaptchaReq) GetNumber() isVerifyCaptchaReq_Number {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *VerifyCaptchaReq) GetPhoneNumber() *v14.PhoneNumber {
	if x != nil {
		if x, ok := x.Number.(*VerifyCaptchaReq_PhoneNumber); ok {
			return x.PhoneNumber
		}
	}
	return nil
}

func (x *VerifyCaptchaReq) GetEmail() string {
	if x != nil {
		if x, ok := x.Number.(*VerifyCaptchaReq_Email); ok {
			return x.Email
		}
	}
	return ""
}

type isVerifyCaptchaReq_Number interface {
	isVerifyCaptchaReq_Number()
}

type VerifyCaptchaReq_PhoneNumber struct {
	PhoneNumber *v14.PhoneNumber `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3,oneof"`
}

type VerifyCaptchaReq_Email struct {
	Email string `protobuf:"bytes,6,opt,name=email,proto3,oneof"`
}

func (*VerifyCaptchaReq_PhoneNumber) isVerifyCaptchaReq_Number() {}

func (*VerifyCaptchaReq_Email) isVerifyCaptchaReq_Number() {}

type VerifyCaptchaResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyCaptchaResp) Reset() {
	*x = VerifyCaptchaResp{}
	mi := &file_captcha_v1_captcha_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyCaptchaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCaptchaResp) ProtoMessage() {}

func (x *VerifyCaptchaResp) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_v1_captcha_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCaptchaResp.ProtoReflect.Descriptor instead.
func (*VerifyCaptchaResp) Descriptor() ([]byte, []int) {
	return file_captcha_v1_captcha_proto_rawDescGZIP(), []int{3}
}

var File_captcha_v1_captcha_proto protoreflect.FileDescriptor

const file_captcha_v1_captcha_proto_rawDesc = "" +
	"\n" +
	"\x18captcha/v1/captcha.proto\x12\n" +
	"captcha.v1\x1a\x16enums/v1/message.proto\x1a\x14mail/v1/params.proto\x1a\x13sms/v1/params.proto\x1a\x14types/v1/types.proto\x1a\x18limiter/v1/limiter.proto\x1a$validation/v1/predefined_rules.proto\x1a\x1bbuf/validate/validate.proto\"\xf6\x01\n" +
	"\x0eSendCaptchaReq\x12I\n" +
	"\vsender_type\x18\x01 \x01(\x0e2\x1b.enums.v1.MessageSenderTypeB\v\xbaH\b\x82\x01\x05\xc8\xe2\xe8\x03\x01R\n" +
	"senderType\x12\x18\n" +
	"\acaptcha\x18\x02 \x01(\tR\acaptcha\x12!\n" +
	"\fcaptcha_type\x18\x03 \x01(\tR\vcaptchaType\x12&\n" +
	"\x03sms\x18\x04 \x01(\v2\x12.sms.v1.SendSmsReqH\x00R\x03sms\x12*\n" +
	"\x04mail\x18\x05 \x01(\v2\x14.mail.v1.SendMailReqH\x00R\x04mailB\b\n" +
	"\x06sender\"T\n" +
	"\x0fSendCaptchaResp\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12+\n" +
	"\x05limit\x18\x02 \x01(\v2\x15.limiter.v1.LimitRuleR\x05limit\"\x8e\x02\n" +
	"\x10VerifyCaptchaReq\x12I\n" +
	"\vsender_type\x18\x01 \x01(\x0e2\x1b.enums.v1.MessageSenderTypeB\v\xbaH\b\x82\x01\x05\xc8\xe2\xe8\x03\x01R\n" +
	"senderType\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x18\n" +
	"\acaptcha\x18\x03 \x01(\tR\acaptcha\x12!\n" +
	"\fcaptcha_type\x18\x04 \x01(\tR\vcaptchaType\x12:\n" +
	"\fphone_number\x18\x05 \x01(\v2\x15.types.v1.PhoneNumberH\x00R\vphoneNumber\x12\x16\n" +
	"\x05email\x18\x06 \x01(\tH\x00R\x05emailB\b\n" +
	"\x06number\"\x13\n" +
	"\x11VerifyCaptchaRespB\xa1\x01\n" +
	"\x0ecom.captcha.v1B\fCaptchaProtoP\x01Z8github.com/byteflowing/proto/gen/go/captcha/v1;captchav1\xa2\x02\x03CXX\xaa\x02\n" +
	"Captcha.V1\xca\x02\n" +
	"Captcha\\V1\xe2\x02\x16Captcha\\V1\\GPBMetadata\xea\x02\vCaptcha::V1b\x06proto3"

var (
	file_captcha_v1_captcha_proto_rawDescOnce sync.Once
	file_captcha_v1_captcha_proto_rawDescData []byte
)

func file_captcha_v1_captcha_proto_rawDescGZIP() []byte {
	file_captcha_v1_captcha_proto_rawDescOnce.Do(func() {
		file_captcha_v1_captcha_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_captcha_v1_captcha_proto_rawDesc), len(file_captcha_v1_captcha_proto_rawDesc)))
	})
	return file_captcha_v1_captcha_proto_rawDescData
}

var file_captcha_v1_captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_captcha_v1_captcha_proto_goTypes = []any{
	(*SendCaptchaReq)(nil),    // 0: captcha.v1.SendCaptchaReq
	(*SendCaptchaResp)(nil),   // 1: captcha.v1.SendCaptchaResp
	(*VerifyCaptchaReq)(nil),  // 2: captcha.v1.VerifyCaptchaReq
	(*VerifyCaptchaResp)(nil), // 3: captcha.v1.VerifyCaptchaResp
	(v1.MessageSenderType)(0), // 4: enums.v1.MessageSenderType
	(*v11.SendSmsReq)(nil),    // 5: sms.v1.SendSmsReq
	(*v12.SendMailReq)(nil),   // 6: mail.v1.SendMailReq
	(*v13.LimitRule)(nil),     // 7: limiter.v1.LimitRule
	(*v14.PhoneNumber)(nil),   // 8: types.v1.PhoneNumber
}
var file_captcha_v1_captcha_proto_depIdxs = []int32{
	4, // 0: captcha.v1.SendCaptchaReq.sender_type:type_name -> enums.v1.MessageSenderType
	5, // 1: captcha.v1.SendCaptchaReq.sms:type_name -> sms.v1.SendSmsReq
	6, // 2: captcha.v1.SendCaptchaReq.mail:type_name -> mail.v1.SendMailReq
	7, // 3: captcha.v1.SendCaptchaResp.limit:type_name -> limiter.v1.LimitRule
	4, // 4: captcha.v1.VerifyCaptchaReq.sender_type:type_name -> enums.v1.MessageSenderType
	8, // 5: captcha.v1.VerifyCaptchaReq.phone_number:type_name -> types.v1.PhoneNumber
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_captcha_v1_captcha_proto_init() }
func file_captcha_v1_captcha_proto_init() {
	if File_captcha_v1_captcha_proto != nil {
		return
	}
	file_captcha_v1_captcha_proto_msgTypes[0].OneofWrappers = []any{
		(*SendCaptchaReq_Sms)(nil),
		(*SendCaptchaReq_Mail)(nil),
	}
	file_captcha_v1_captcha_proto_msgTypes[2].OneofWrappers = []any{
		(*VerifyCaptchaReq_PhoneNumber)(nil),
		(*VerifyCaptchaReq_Email)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_captcha_v1_captcha_proto_rawDesc), len(file_captcha_v1_captcha_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_captcha_v1_captcha_proto_goTypes,
		DependencyIndexes: file_captcha_v1_captcha_proto_depIdxs,
		MessageInfos:      file_captcha_v1_captcha_proto_msgTypes,
	}.Build()
	File_captcha_v1_captcha_proto = out.File
	file_captcha_v1_captcha_proto_goTypes = nil
	file_captcha_v1_captcha_proto_depIdxs = nil
}
