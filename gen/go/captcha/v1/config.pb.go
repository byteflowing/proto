// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: captcha/v1/config.proto

package captchav1

import (
	v1 "github.com/byteflowing/proto/gen/go/enums/v1"
	v11 "github.com/byteflowing/proto/gen/go/limiter/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CaptchaProvider struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Sender v1.MessageSenderType   `protobuf:"varint,1,opt,name=sender,proto3,enum=enums.v1.MessageSenderType" json:"sender,omitempty"`
	// 验证码的key前缀
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// 错误尝试次数的key前缀
	ErrPrefix string `protobuf:"bytes,3,opt,name=err_prefix,json=errPrefix,proto3" json:"err_prefix,omitempty"`
	// 验证码保留时长
	Keeping *durationpb.Duration `protobuf:"bytes,4,opt,name=keeping,proto3" json:"keeping,omitempty"`
	// 验证码是否大小写敏感
	CaseSensitive bool `protobuf:"varint,5,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	// 验证码可以尝试多少次
	ErrTryLimit int32 `protobuf:"varint,6,opt,name=err_try_limit,json=errTryLimit,proto3" json:"err_try_limit,omitempty"`
	// 验证码限流配置
	Limits        []*v11.LimitRule `protobuf:"bytes,7,rep,name=limits,proto3" json:"limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptchaProvider) Reset() {
	*x = CaptchaProvider{}
	mi := &file_captcha_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptchaProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaProvider) ProtoMessage() {}

func (x *CaptchaProvider) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaProvider.ProtoReflect.Descriptor instead.
func (*CaptchaProvider) Descriptor() ([]byte, []int) {
	return file_captcha_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *CaptchaProvider) GetSender() v1.MessageSenderType {
	if x != nil {
		return x.Sender
	}
	return v1.MessageSenderType(0)
}

func (x *CaptchaProvider) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CaptchaProvider) GetErrPrefix() string {
	if x != nil {
		return x.ErrPrefix
	}
	return ""
}

func (x *CaptchaProvider) GetKeeping() *durationpb.Duration {
	if x != nil {
		return x.Keeping
	}
	return nil
}

func (x *CaptchaProvider) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *CaptchaProvider) GetErrTryLimit() int32 {
	if x != nil {
		return x.ErrTryLimit
	}
	return 0
}

func (x *CaptchaProvider) GetLimits() []*v11.LimitRule {
	if x != nil {
		return x.Limits
	}
	return nil
}

type CaptchaConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Providers     []*CaptchaProvider     `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptchaConfig) Reset() {
	*x = CaptchaConfig{}
	mi := &file_captcha_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptchaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaConfig) ProtoMessage() {}

func (x *CaptchaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaConfig.ProtoReflect.Descriptor instead.
func (*CaptchaConfig) Descriptor() ([]byte, []int) {
	return file_captcha_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CaptchaConfig) GetProviders() []*CaptchaProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

var File_captcha_v1_config_proto protoreflect.FileDescriptor

const file_captcha_v1_config_proto_rawDesc = "" +
	"\n" +
	"\x17captcha/v1/config.proto\x12\n" +
	"captcha.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x16enums/v1/message.proto\x1a\x18limiter/v1/limiter.proto\"\xac\x02\n" +
	"\x0fCaptchaProvider\x123\n" +
	"\x06sender\x18\x01 \x01(\x0e2\x1b.enums.v1.MessageSenderTypeR\x06sender\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\tR\x06prefix\x12\x1d\n" +
	"\n" +
	"err_prefix\x18\x03 \x01(\tR\terrPrefix\x123\n" +
	"\akeeping\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\akeeping\x12%\n" +
	"\x0ecase_sensitive\x18\x05 \x01(\bR\rcaseSensitive\x12\"\n" +
	"\rerr_try_limit\x18\x06 \x01(\x05R\verrTryLimit\x12-\n" +
	"\x06limits\x18\a \x03(\v2\x15.limiter.v1.LimitRuleR\x06limits\"J\n" +
	"\rCaptchaConfig\x129\n" +
	"\tproviders\x18\x01 \x03(\v2\x1b.captcha.v1.CaptchaProviderR\tprovidersB\xa0\x01\n" +
	"\x0ecom.captcha.v1B\vConfigProtoP\x01Z8github.com/byteflowing/proto/gen/go/captcha/v1;captchav1\xa2\x02\x03CXX\xaa\x02\n" +
	"Captcha.V1\xca\x02\n" +
	"Captcha\\V1\xe2\x02\x16Captcha\\V1\\GPBMetadata\xea\x02\vCaptcha::V1b\x06proto3"

var (
	file_captcha_v1_config_proto_rawDescOnce sync.Once
	file_captcha_v1_config_proto_rawDescData []byte
)

func file_captcha_v1_config_proto_rawDescGZIP() []byte {
	file_captcha_v1_config_proto_rawDescOnce.Do(func() {
		file_captcha_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_captcha_v1_config_proto_rawDesc), len(file_captcha_v1_config_proto_rawDesc)))
	})
	return file_captcha_v1_config_proto_rawDescData
}

var file_captcha_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_captcha_v1_config_proto_goTypes = []any{
	(*CaptchaProvider)(nil),     // 0: captcha.v1.CaptchaProvider
	(*CaptchaConfig)(nil),       // 1: captcha.v1.CaptchaConfig
	(v1.MessageSenderType)(0),   // 2: enums.v1.MessageSenderType
	(*durationpb.Duration)(nil), // 3: google.protobuf.Duration
	(*v11.LimitRule)(nil),       // 4: limiter.v1.LimitRule
}
var file_captcha_v1_config_proto_depIdxs = []int32{
	2, // 0: captcha.v1.CaptchaProvider.sender:type_name -> enums.v1.MessageSenderType
	3, // 1: captcha.v1.CaptchaProvider.keeping:type_name -> google.protobuf.Duration
	4, // 2: captcha.v1.CaptchaProvider.limits:type_name -> limiter.v1.LimitRule
	0, // 3: captcha.v1.CaptchaConfig.providers:type_name -> captcha.v1.CaptchaProvider
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_captcha_v1_config_proto_init() }
func file_captcha_v1_config_proto_init() {
	if File_captcha_v1_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_captcha_v1_config_proto_rawDesc), len(file_captcha_v1_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_captcha_v1_config_proto_goTypes,
		DependencyIndexes: file_captcha_v1_config_proto_depIdxs,
		MessageInfos:      file_captcha_v1_config_proto_msgTypes,
	}.Build()
	File_captcha_v1_config_proto = out.File
	file_captcha_v1_config_proto_goTypes = nil
	file_captcha_v1_config_proto_depIdxs = nil
}
