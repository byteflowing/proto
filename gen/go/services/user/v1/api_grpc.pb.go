// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/user/v1/api.proto

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_SendCaptcha_FullMethodName         = "/services.user.v1.UserService/SendCaptcha"
	UserService_VerifyCaptcha_FullMethodName       = "/services.user.v1.UserService/VerifyCaptcha"
	UserService_SignUp_FullMethodName              = "/services.user.v1.UserService/SignUp"
	UserService_SignIn_FullMethodName              = "/services.user.v1.UserService/SignIn"
	UserService_SignOut_FullMethodName             = "/services.user.v1.UserService/SignOut"
	UserService_SignOutByUid_FullMethodName        = "/services.user.v1.UserService/SignOutByUid"
	UserService_Refresh_FullMethodName             = "/services.user.v1.UserService/Refresh"
	UserService_ChangePassword_FullMethodName      = "/services.user.v1.UserService/ChangePassword"
	UserService_ResetPassword_FullMethodName       = "/services.user.v1.UserService/ResetPassword"
	UserService_ChangeUserStatus_FullMethodName    = "/services.user.v1.UserService/ChangeUserStatus"
	UserService_ChangePhone_FullMethodName         = "/services.user.v1.UserService/ChangePhone"
	UserService_ChangeEmail_FullMethodName         = "/services.user.v1.UserService/ChangeEmail"
	UserService_ChangeUserAvatar_FullMethodName    = "/services.user.v1.UserService/ChangeUserAvatar"
	UserService_ChangeUserGender_FullMethodName    = "/services.user.v1.UserService/ChangeUserGender"
	UserService_ChangeUserBirthday_FullMethodName  = "/services.user.v1.UserService/ChangeUserBirthday"
	UserService_ChangeUserName_FullMethodName      = "/services.user.v1.UserService/ChangeUserName"
	UserService_ChangeUserAlias_FullMethodName     = "/services.user.v1.UserService/ChangeUserAlias"
	UserService_ChangeUserNumber_FullMethodName    = "/services.user.v1.UserService/ChangeUserNumber"
	UserService_ChangeUserAddress_FullMethodName   = "/services.user.v1.UserService/ChangeUserAddress"
	UserService_ChangeUserType_FullMethodName      = "/services.user.v1.UserService/ChangeUserType"
	UserService_ChangeUserLevel_FullMethodName     = "/services.user.v1.UserService/ChangeUserLevel"
	UserService_ChangeUserExt_FullMethodName       = "/services.user.v1.UserService/ChangeUserExt"
	UserService_VerifyPhone_FullMethodName         = "/services.user.v1.UserService/VerifyPhone"
	UserService_VerifyEmail_FullMethodName         = "/services.user.v1.UserService/VerifyEmail"
	UserService_VerifyToken_FullMethodName         = "/services.user.v1.UserService/VerifyToken"
	UserService_GetActiveSignInLogs_FullMethodName = "/services.user.v1.UserService/GetActiveSignInLogs"
	UserService_PagingGetSignInLogs_FullMethodName = "/services.user.v1.UserService/PagingGetSignInLogs"
	UserService_PagingGetUsers_FullMethodName      = "/services.user.v1.UserService/PagingGetUsers"
	UserService_CreateUser_FullMethodName          = "/services.user.v1.UserService/CreateUser"
	UserService_UpdateUser_FullMethodName          = "/services.user.v1.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName          = "/services.user.v1.UserService/DeleteUser"
	UserService_DeleteUsers_FullMethodName         = "/services.user.v1.UserService/DeleteUsers"
	UserService_GetUserAuth_FullMethodName         = "/services.user.v1.UserService/GetUserAuth"
	UserService_UnbindUserAuth_FullMethodName      = "/services.user.v1.UserService/UnbindUserAuth"
	UserService_BindUserAuth_FullMethodName        = "/services.user.v1.UserService/BindUserAuth"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SendCaptcha(ctx context.Context, in *SendCaptchaReq, opts ...grpc.CallOption) (*SendCaptchaResp, error)
	VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaResp, error)
	SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInResp, error)
	SignOut(ctx context.Context, in *SignOutReq, opts ...grpc.CallOption) (*SignOutResp, error)
	SignOutByUid(ctx context.Context, in *SignOutByUidReq, opts ...grpc.CallOption) (*SignOutByUidResp, error)
	Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*RefreshResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, opts ...grpc.CallOption) (*ChangeUserStatusResp, error)
	ChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResp, error)
	ChangeEmail(ctx context.Context, in *ChangeEmailReq, opts ...grpc.CallOption) (*ChangeEmailResp, error)
	ChangeUserAvatar(ctx context.Context, in *ChangeUserAvatarReq, opts ...grpc.CallOption) (*ChangeUserAvatarResp, error)
	ChangeUserGender(ctx context.Context, in *ChangeUserGenderReq, opts ...grpc.CallOption) (*ChangeUserGenderResp, error)
	ChangeUserBirthday(ctx context.Context, in *ChangeUserBirthdayReq, opts ...grpc.CallOption) (*ChangeUserBirthdayResp, error)
	ChangeUserName(ctx context.Context, in *ChangeUserNameReq, opts ...grpc.CallOption) (*ChangeUserNameResp, error)
	ChangeUserAlias(ctx context.Context, in *ChangeUserAliasReq, opts ...grpc.CallOption) (*ChangeUserAliasResp, error)
	ChangeUserNumber(ctx context.Context, in *ChangeUserNumberReq, opts ...grpc.CallOption) (*ChangeUserNumberResp, error)
	ChangeUserAddress(ctx context.Context, in *ChangeUserAddressReq, opts ...grpc.CallOption) (*ChangeUserAddressResp, error)
	ChangeUserType(ctx context.Context, in *ChangeUserTypeReq, opts ...grpc.CallOption) (*ChangeUserTypeResp, error)
	ChangeUserLevel(ctx context.Context, in *ChangeUserLevelReq, opts ...grpc.CallOption) (*ChangeUserLevelResp, error)
	ChangeUserExt(ctx context.Context, in *ChangeUserExtReq, opts ...grpc.CallOption) (*ChangeUserExtResp, error)
	VerifyPhone(ctx context.Context, in *VerifyPhoneReq, opts ...grpc.CallOption) (*VerifyPhoneResp, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...grpc.CallOption) (*VerifyEmailResp, error)
	VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error)
	GetActiveSignInLogs(ctx context.Context, in *GetActiveSignInLogsReq, opts ...grpc.CallOption) (*GetActiveSignInLogsResp, error)
	PagingGetSignInLogs(ctx context.Context, in *PagingGetSignInLogsReq, opts ...grpc.CallOption) (*PagingGetSignInLogsResp, error)
	PagingGetUsers(ctx context.Context, in *PagingGetUsersReq, opts ...grpc.CallOption) (*PagingGetUsersResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	DeleteUsers(ctx context.Context, in *DeleteUsersReq, opts ...grpc.CallOption) (*DeleteUsersResp, error)
	GetUserAuth(ctx context.Context, in *GetUserAuthReq, opts ...grpc.CallOption) (*GetUserAuthResp, error)
	UnbindUserAuth(ctx context.Context, in *UnbindUserAuthReq, opts ...grpc.CallOption) (*UnbindUserAuthResp, error)
	BindUserAuth(ctx context.Context, in *BindUserAuthReq, opts ...grpc.CallOption) (*BindUserAuthResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SendCaptcha(ctx context.Context, in *SendCaptchaReq, opts ...grpc.CallOption) (*SendCaptchaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCaptchaResp)
	err := c.cc.Invoke(ctx, UserService_SendCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyCaptchaResp)
	err := c.cc.Invoke(ctx, UserService_VerifyCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpResp)
	err := c.cc.Invoke(ctx, UserService_SignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResp)
	err := c.cc.Invoke(ctx, UserService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignOut(ctx context.Context, in *SignOutReq, opts ...grpc.CallOption) (*SignOutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutResp)
	err := c.cc.Invoke(ctx, UserService_SignOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignOutByUid(ctx context.Context, in *SignOutByUidReq, opts ...grpc.CallOption) (*SignOutByUidResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutByUidResp)
	err := c.cc.Invoke(ctx, UserService_SignOutByUid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*RefreshResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResp)
	err := c.cc.Invoke(ctx, UserService_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, UserService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, UserService_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, opts ...grpc.CallOption) (*ChangeUserStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserStatusResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc.CallOption) (*ChangePhoneResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePhoneResp)
	err := c.cc.Invoke(ctx, UserService_ChangePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeEmail(ctx context.Context, in *ChangeEmailReq, opts ...grpc.CallOption) (*ChangeEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEmailResp)
	err := c.cc.Invoke(ctx, UserService_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserAvatar(ctx context.Context, in *ChangeUserAvatarReq, opts ...grpc.CallOption) (*ChangeUserAvatarResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserAvatarResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserGender(ctx context.Context, in *ChangeUserGenderReq, opts ...grpc.CallOption) (*ChangeUserGenderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserGenderResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserGender_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserBirthday(ctx context.Context, in *ChangeUserBirthdayReq, opts ...grpc.CallOption) (*ChangeUserBirthdayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserBirthdayResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserBirthday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserName(ctx context.Context, in *ChangeUserNameReq, opts ...grpc.CallOption) (*ChangeUserNameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserNameResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserAlias(ctx context.Context, in *ChangeUserAliasReq, opts ...grpc.CallOption) (*ChangeUserAliasResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserAliasResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserNumber(ctx context.Context, in *ChangeUserNumberReq, opts ...grpc.CallOption) (*ChangeUserNumberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserNumberResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserAddress(ctx context.Context, in *ChangeUserAddressReq, opts ...grpc.CallOption) (*ChangeUserAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserAddressResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserType(ctx context.Context, in *ChangeUserTypeReq, opts ...grpc.CallOption) (*ChangeUserTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserTypeResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserLevel(ctx context.Context, in *ChangeUserLevelReq, opts ...grpc.CallOption) (*ChangeUserLevelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserLevelResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserExt(ctx context.Context, in *ChangeUserExtReq, opts ...grpc.CallOption) (*ChangeUserExtResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserExtResp)
	err := c.cc.Invoke(ctx, UserService_ChangeUserExt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPhone(ctx context.Context, in *VerifyPhoneReq, opts ...grpc.CallOption) (*VerifyPhoneResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPhoneResp)
	err := c.cc.Invoke(ctx, UserService_VerifyPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...grpc.CallOption) (*VerifyEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResp)
	err := c.cc.Invoke(ctx, UserService_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenResp)
	err := c.cc.Invoke(ctx, UserService_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetActiveSignInLogs(ctx context.Context, in *GetActiveSignInLogsReq, opts ...grpc.CallOption) (*GetActiveSignInLogsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSignInLogsResp)
	err := c.cc.Invoke(ctx, UserService_GetActiveSignInLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PagingGetSignInLogs(ctx context.Context, in *PagingGetSignInLogsReq, opts ...grpc.CallOption) (*PagingGetSignInLogsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PagingGetSignInLogsResp)
	err := c.cc.Invoke(ctx, UserService_PagingGetSignInLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PagingGetUsers(ctx context.Context, in *PagingGetUsersReq, opts ...grpc.CallOption) (*PagingGetUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PagingGetUsersResp)
	err := c.cc.Invoke(ctx, UserService_PagingGetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUsers(ctx context.Context, in *DeleteUsersReq, opts ...grpc.CallOption) (*DeleteUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUsersResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAuth(ctx context.Context, in *GetUserAuthReq, opts ...grpc.CallOption) (*GetUserAuthResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAuthResp)
	err := c.cc.Invoke(ctx, UserService_GetUserAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnbindUserAuth(ctx context.Context, in *UnbindUserAuthReq, opts ...grpc.CallOption) (*UnbindUserAuthResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindUserAuthResp)
	err := c.cc.Invoke(ctx, UserService_UnbindUserAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindUserAuth(ctx context.Context, in *BindUserAuthReq, opts ...grpc.CallOption) (*BindUserAuthResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindUserAuthResp)
	err := c.cc.Invoke(ctx, UserService_BindUserAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	SendCaptcha(context.Context, *SendCaptchaReq) (*SendCaptchaResp, error)
	VerifyCaptcha(context.Context, *VerifyCaptchaReq) (*VerifyCaptchaResp, error)
	SignUp(context.Context, *SignUpReq) (*SignUpResp, error)
	SignIn(context.Context, *SignInReq) (*SignInResp, error)
	SignOut(context.Context, *SignOutReq) (*SignOutResp, error)
	SignOutByUid(context.Context, *SignOutByUidReq) (*SignOutByUidResp, error)
	Refresh(context.Context, *RefreshReq) (*RefreshResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	ChangeUserStatus(context.Context, *ChangeUserStatusReq) (*ChangeUserStatusResp, error)
	ChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResp, error)
	ChangeEmail(context.Context, *ChangeEmailReq) (*ChangeEmailResp, error)
	ChangeUserAvatar(context.Context, *ChangeUserAvatarReq) (*ChangeUserAvatarResp, error)
	ChangeUserGender(context.Context, *ChangeUserGenderReq) (*ChangeUserGenderResp, error)
	ChangeUserBirthday(context.Context, *ChangeUserBirthdayReq) (*ChangeUserBirthdayResp, error)
	ChangeUserName(context.Context, *ChangeUserNameReq) (*ChangeUserNameResp, error)
	ChangeUserAlias(context.Context, *ChangeUserAliasReq) (*ChangeUserAliasResp, error)
	ChangeUserNumber(context.Context, *ChangeUserNumberReq) (*ChangeUserNumberResp, error)
	ChangeUserAddress(context.Context, *ChangeUserAddressReq) (*ChangeUserAddressResp, error)
	ChangeUserType(context.Context, *ChangeUserTypeReq) (*ChangeUserTypeResp, error)
	ChangeUserLevel(context.Context, *ChangeUserLevelReq) (*ChangeUserLevelResp, error)
	ChangeUserExt(context.Context, *ChangeUserExtReq) (*ChangeUserExtResp, error)
	VerifyPhone(context.Context, *VerifyPhoneReq) (*VerifyPhoneResp, error)
	VerifyEmail(context.Context, *VerifyEmailReq) (*VerifyEmailResp, error)
	VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error)
	GetActiveSignInLogs(context.Context, *GetActiveSignInLogsReq) (*GetActiveSignInLogsResp, error)
	PagingGetSignInLogs(context.Context, *PagingGetSignInLogsReq) (*PagingGetSignInLogsResp, error)
	PagingGetUsers(context.Context, *PagingGetUsersReq) (*PagingGetUsersResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	DeleteUsers(context.Context, *DeleteUsersReq) (*DeleteUsersResp, error)
	GetUserAuth(context.Context, *GetUserAuthReq) (*GetUserAuthResp, error)
	UnbindUserAuth(context.Context, *UnbindUserAuthReq) (*UnbindUserAuthResp, error)
	BindUserAuth(context.Context, *BindUserAuthReq) (*BindUserAuthResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) SendCaptcha(context.Context, *SendCaptchaReq) (*SendCaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCaptcha not implemented")
}
func (UnimplementedUserServiceServer) VerifyCaptcha(context.Context, *VerifyCaptchaReq) (*VerifyCaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCaptcha not implemented")
}
func (UnimplementedUserServiceServer) SignUp(context.Context, *SignUpReq) (*SignUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUserServiceServer) SignIn(context.Context, *SignInReq) (*SignInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUserServiceServer) SignOut(context.Context, *SignOutReq) (*SignOutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedUserServiceServer) SignOutByUid(context.Context, *SignOutByUidReq) (*SignOutByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOutByUid not implemented")
}
func (UnimplementedUserServiceServer) Refresh(context.Context, *RefreshReq) (*RefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserStatus(context.Context, *ChangeUserStatusReq) (*ChangeUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}
func (UnimplementedUserServiceServer) ChangePhone(context.Context, *ChangePhoneReq) (*ChangePhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhone not implemented")
}
func (UnimplementedUserServiceServer) ChangeEmail(context.Context, *ChangeEmailReq) (*ChangeEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserAvatar(context.Context, *ChangeUserAvatarReq) (*ChangeUserAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserAvatar not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserGender(context.Context, *ChangeUserGenderReq) (*ChangeUserGenderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserGender not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserBirthday(context.Context, *ChangeUserBirthdayReq) (*ChangeUserBirthdayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserBirthday not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserName(context.Context, *ChangeUserNameReq) (*ChangeUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserName not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserAlias(context.Context, *ChangeUserAliasReq) (*ChangeUserAliasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserAlias not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserNumber(context.Context, *ChangeUserNumberReq) (*ChangeUserNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserNumber not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserAddress(context.Context, *ChangeUserAddressReq) (*ChangeUserAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserAddress not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserType(context.Context, *ChangeUserTypeReq) (*ChangeUserTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserType not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserLevel(context.Context, *ChangeUserLevelReq) (*ChangeUserLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserLevel not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserExt(context.Context, *ChangeUserExtReq) (*ChangeUserExtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserExt not implemented")
}
func (UnimplementedUserServiceServer) VerifyPhone(context.Context, *VerifyPhoneReq) (*VerifyPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedUserServiceServer) VerifyEmail(context.Context, *VerifyEmailReq) (*VerifyEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserServiceServer) VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedUserServiceServer) GetActiveSignInLogs(context.Context, *GetActiveSignInLogsReq) (*GetActiveSignInLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSignInLogs not implemented")
}
func (UnimplementedUserServiceServer) PagingGetSignInLogs(context.Context, *PagingGetSignInLogsReq) (*PagingGetSignInLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingGetSignInLogs not implemented")
}
func (UnimplementedUserServiceServer) PagingGetUsers(context.Context, *PagingGetUsersReq) (*PagingGetUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingGetUsers not implemented")
}
func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUsers(context.Context, *DeleteUsersReq) (*DeleteUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedUserServiceServer) GetUserAuth(context.Context, *GetUserAuthReq) (*GetUserAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuth not implemented")
}
func (UnimplementedUserServiceServer) UnbindUserAuth(context.Context, *UnbindUserAuthReq) (*UnbindUserAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserAuth not implemented")
}
func (UnimplementedUserServiceServer) BindUserAuth(context.Context, *BindUserAuthReq) (*BindUserAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserAuth not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SendCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendCaptcha(ctx, req.(*SendCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyCaptcha(ctx, req.(*VerifyCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignOut(ctx, req.(*SignOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignOutByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignOutByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignOutByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignOutByUid(ctx, req.(*SignOutByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Refresh(ctx, req.(*RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserStatus(ctx, req.(*ChangeUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePhone(ctx, req.(*ChangePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeEmail(ctx, req.(*ChangeEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserAvatar(ctx, req.(*ChangeUserAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserGenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserGender(ctx, req.(*ChangeUserGenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserBirthdayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserBirthday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserBirthday(ctx, req.(*ChangeUserBirthdayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserName(ctx, req.(*ChangeUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserAliasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserAlias(ctx, req.(*ChangeUserAliasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserNumber(ctx, req.(*ChangeUserNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserAddress(ctx, req.(*ChangeUserAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserType(ctx, req.(*ChangeUserTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserLevel(ctx, req.(*ChangeUserLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUserExt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserExt(ctx, req.(*ChangeUserExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPhone(ctx, req.(*VerifyPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyEmail(ctx, req.(*VerifyEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyToken(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetActiveSignInLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSignInLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetActiveSignInLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetActiveSignInLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetActiveSignInLogs(ctx, req.(*GetActiveSignInLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PagingGetSignInLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingGetSignInLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PagingGetSignInLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PagingGetSignInLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PagingGetSignInLogs(ctx, req.(*PagingGetSignInLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PagingGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingGetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PagingGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PagingGetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PagingGetUsers(ctx, req.(*PagingGetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUsers(ctx, req.(*DeleteUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAuth(ctx, req.(*GetUserAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnbindUserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnbindUserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnbindUserAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnbindUserAuth(ctx, req.(*UnbindUserAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BindUserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindUserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BindUserAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindUserAuth(ctx, req.(*BindUserAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCaptcha",
			Handler:    _UserService_SendCaptcha_Handler,
		},
		{
			MethodName: "VerifyCaptcha",
			Handler:    _UserService_VerifyCaptcha_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _UserService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _UserService_SignOut_Handler,
		},
		{
			MethodName: "SignOutByUid",
			Handler:    _UserService_SignOutByUid_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _UserService_Refresh_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserService_ResetPassword_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _UserService_ChangeUserStatus_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _UserService_ChangePhone_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _UserService_ChangeEmail_Handler,
		},
		{
			MethodName: "ChangeUserAvatar",
			Handler:    _UserService_ChangeUserAvatar_Handler,
		},
		{
			MethodName: "ChangeUserGender",
			Handler:    _UserService_ChangeUserGender_Handler,
		},
		{
			MethodName: "ChangeUserBirthday",
			Handler:    _UserService_ChangeUserBirthday_Handler,
		},
		{
			MethodName: "ChangeUserName",
			Handler:    _UserService_ChangeUserName_Handler,
		},
		{
			MethodName: "ChangeUserAlias",
			Handler:    _UserService_ChangeUserAlias_Handler,
		},
		{
			MethodName: "ChangeUserNumber",
			Handler:    _UserService_ChangeUserNumber_Handler,
		},
		{
			MethodName: "ChangeUserAddress",
			Handler:    _UserService_ChangeUserAddress_Handler,
		},
		{
			MethodName: "ChangeUserType",
			Handler:    _UserService_ChangeUserType_Handler,
		},
		{
			MethodName: "ChangeUserLevel",
			Handler:    _UserService_ChangeUserLevel_Handler,
		},
		{
			MethodName: "ChangeUserExt",
			Handler:    _UserService_ChangeUserExt_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _UserService_VerifyPhone_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _UserService_VerifyEmail_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _UserService_VerifyToken_Handler,
		},
		{
			MethodName: "GetActiveSignInLogs",
			Handler:    _UserService_GetActiveSignInLogs_Handler,
		},
		{
			MethodName: "PagingGetSignInLogs",
			Handler:    _UserService_PagingGetSignInLogs_Handler,
		},
		{
			MethodName: "PagingGetUsers",
			Handler:    _UserService_PagingGetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _UserService_DeleteUsers_Handler,
		},
		{
			MethodName: "GetUserAuth",
			Handler:    _UserService_GetUserAuth_Handler,
		},
		{
			MethodName: "UnbindUserAuth",
			Handler:    _UserService_UnbindUserAuth_Handler,
		},
		{
			MethodName: "BindUserAuth",
			Handler:    _UserService_BindUserAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/user/v1/api.proto",
}
