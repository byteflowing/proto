// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: db/v1/db.proto

package dbv1

import (
	v1 "github.com/byteflowing/proto/gen/go/enums/v1"
	v11 "github.com/byteflowing/proto/gen/go/log/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DbLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 慢日志阈值，单位ms
	SlowThreshold uint32 `protobuf:"varint,1,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`
	// 输出
	Out v1.LogOut `protobuf:"varint,2,opt,name=out,proto3,enum=enums.v1.LogOut" json:"out,omitempty"`
	// 是否彩色打印日志
	Colorful bool `protobuf:"varint,3,opt,name=colorful,proto3" json:"colorful,omitempty"`
	// 忽略RecordNotFoundError
	IgnoreRecordNotFoundErr bool `protobuf:"varint,4,opt,name=ignore_record_not_found_err,json=ignoreRecordNotFoundErr,proto3" json:"ignore_record_not_found_err,omitempty"`
	// 不在日志中打印参数
	ParameterizedQueries bool `protobuf:"varint,5,opt,name=parameterized_queries,json=parameterizedQueries,proto3" json:"parameterized_queries,omitempty"`
	// 日志级别
	Level v1.DbLogLevel `protobuf:"varint,6,opt,name=level,proto3,enum=enums.v1.DbLogLevel" json:"level,omitempty"`
	// 日志轮转，仅当out为file时有效
	Rotation      *v11.RotationConfig `protobuf:"bytes,7,opt,name=rotation,proto3" json:"rotation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbLog) Reset() {
	*x = DbLog{}
	mi := &file_db_v1_db_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbLog) ProtoMessage() {}

func (x *DbLog) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbLog.ProtoReflect.Descriptor instead.
func (*DbLog) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{0}
}

func (x *DbLog) GetSlowThreshold() uint32 {
	if x != nil {
		return x.SlowThreshold
	}
	return 0
}

func (x *DbLog) GetOut() v1.LogOut {
	if x != nil {
		return x.Out
	}
	return v1.LogOut(0)
}

func (x *DbLog) GetColorful() bool {
	if x != nil {
		return x.Colorful
	}
	return false
}

func (x *DbLog) GetIgnoreRecordNotFoundErr() bool {
	if x != nil {
		return x.IgnoreRecordNotFoundErr
	}
	return false
}

func (x *DbLog) GetParameterizedQueries() bool {
	if x != nil {
		return x.ParameterizedQueries
	}
	return false
}

func (x *DbLog) GetLevel() v1.DbLogLevel {
	if x != nil {
		return x.Level
	}
	return v1.DbLogLevel(0)
}

func (x *DbLog) GetRotation() *v11.RotationConfig {
	if x != nil {
		return x.Rotation
	}
	return nil
}

type DbConn struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConnMaxLifeTime int32                  `protobuf:"varint,1,opt,name=conn_max_life_time,json=connMaxLifeTime,proto3" json:"conn_max_life_time,omitempty"` // 单位：秒
	MaxIdleTime     int32                  `protobuf:"varint,2,opt,name=max_idle_time,json=maxIdleTime,proto3" json:"max_idle_time,omitempty"`               // 单位：秒
	MaxIdleConnes   int32                  `protobuf:"varint,3,opt,name=max_idle_connes,json=maxIdleConnes,proto3" json:"max_idle_connes,omitempty"`         // 最大空闲连接
	MaxOpenConnes   int32                  `protobuf:"varint,4,opt,name=max_open_connes,json=maxOpenConnes,proto3" json:"max_open_connes,omitempty"`         // 最大打开连接
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DbConn) Reset() {
	*x = DbConn{}
	mi := &file_db_v1_db_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbConn) ProtoMessage() {}

func (x *DbConn) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbConn.ProtoReflect.Descriptor instead.
func (*DbConn) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{1}
}

func (x *DbConn) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DbConn) GetMaxIdleTime() int32 {
	if x != nil {
		return x.MaxIdleTime
	}
	return 0
}

func (x *DbConn) GetMaxIdleConnes() int32 {
	if x != nil {
		return x.MaxIdleConnes
	}
	return 0
}

func (x *DbConn) GetMaxOpenConnes() int32 {
	if x != nil {
		return x.MaxOpenConnes
	}
	return 0
}

type DbMysql struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                                       // 数据库地址
	User          string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                       // 数据库用户名
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                               // 数据库密码
	DbName        string                 `protobuf:"bytes,4,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`                     // 数据库名
	Port          int32                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`                                      // 端口号
	Charset       string                 `protobuf:"bytes,6,opt,name=charset,proto3" json:"charset,omitempty"`                                 // 字符集
	Location      string                 `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`                               // 时区
	ConnTimeout   int32                  `protobuf:"varint,8,opt,name=conn_timeout,json=connTimeout,proto3" json:"conn_timeout,omitempty"`     // 单位：秒
	ReadTimeout   int32                  `protobuf:"varint,9,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`     // 单位：秒
	WriteTimeout  int32                  `protobuf:"varint,10,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"` // 单位：秒
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbMysql) Reset() {
	*x = DbMysql{}
	mi := &file_db_v1_db_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbMysql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbMysql) ProtoMessage() {}

func (x *DbMysql) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbMysql.ProtoReflect.Descriptor instead.
func (*DbMysql) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{2}
}

func (x *DbMysql) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbMysql) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbMysql) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbMysql) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DbMysql) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbMysql) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *DbMysql) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DbMysql) GetConnTimeout() int32 {
	if x != nil {
		return x.ConnTimeout
	}
	return 0
}

func (x *DbMysql) GetReadTimeout() int32 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *DbMysql) GetWriteTimeout() int32 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

type DbPostgres struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                         // 数据库地址
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`                        // 端口号
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                         // 数据库用户名
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                 // 数据库密码
	DbName        string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`       // 数据库名
	SslMode       bool                   `protobuf:"varint,6,opt,name=ssl_mode,json=sslMode,proto3" json:"ssl_mode,omitempty"`   // 是否使用ssl
	TimeZone      string                 `protobuf:"bytes,7,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"` // 时区
	Schema        string                 `protobuf:"bytes,8,opt,name=schema,proto3" json:"schema,omitempty"`                     // schema
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbPostgres) Reset() {
	*x = DbPostgres{}
	mi := &file_db_v1_db_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbPostgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbPostgres) ProtoMessage() {}

func (x *DbPostgres) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbPostgres.ProtoReflect.Descriptor instead.
func (*DbPostgres) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{3}
}

func (x *DbPostgres) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbPostgres) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbPostgres) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbPostgres) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbPostgres) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DbPostgres) GetSslMode() bool {
	if x != nil {
		return x.SslMode
	}
	return false
}

func (x *DbPostgres) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *DbPostgres) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type DbSQLServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                   // 数据库地址
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`                  // 端口号
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                   // 数据库用户名
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`           // 数据库密码
	DbName        string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"` // 数据库名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbSQLServer) Reset() {
	*x = DbSQLServer{}
	mi := &file_db_v1_db_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSQLServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSQLServer) ProtoMessage() {}

func (x *DbSQLServer) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSQLServer.ProtoReflect.Descriptor instead.
func (*DbSQLServer) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{4}
}

func (x *DbSQLServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbSQLServer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbSQLServer) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbSQLServer) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbSQLServer) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type DbSQLite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbPath        string                 `protobuf:"bytes,1,opt,name=db_path,json=dbPath,proto3" json:"db_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbSQLite) Reset() {
	*x = DbSQLite{}
	mi := &file_db_v1_db_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSQLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSQLite) ProtoMessage() {}

func (x *DbSQLite) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSQLite.ProtoReflect.Descriptor instead.
func (*DbSQLite) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{5}
}

func (x *DbSQLite) GetDbPath() string {
	if x != nil {
		return x.DbPath
	}
	return ""
}

type DbConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 数据库类型
	DbType        v1.DbType    `protobuf:"varint,1,opt,name=db_type,json=dbType,proto3,enum=enums.v1.DbType" json:"db_type,omitempty"`
	Log           *DbLog       `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	Conn          *DbConn      `protobuf:"bytes,3,opt,name=conn,proto3" json:"conn,omitempty"`
	Mysql         *DbMysql     `protobuf:"bytes,4,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Postgres      *DbPostgres  `protobuf:"bytes,5,opt,name=postgres,proto3" json:"postgres,omitempty"`
	Sqlserver     *DbSQLServer `protobuf:"bytes,6,opt,name=sqlserver,proto3" json:"sqlserver,omitempty"`
	Sqlite        *DbSQLite    `protobuf:"bytes,7,opt,name=sqlite,proto3" json:"sqlite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbConfig) Reset() {
	*x = DbConfig{}
	mi := &file_db_v1_db_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbConfig) ProtoMessage() {}

func (x *DbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbConfig.ProtoReflect.Descriptor instead.
func (*DbConfig) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{6}
}

func (x *DbConfig) GetDbType() v1.DbType {
	if x != nil {
		return x.DbType
	}
	return v1.DbType(0)
}

func (x *DbConfig) GetLog() *DbLog {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *DbConfig) GetConn() *DbConn {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *DbConfig) GetMysql() *DbMysql {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *DbConfig) GetPostgres() *DbPostgres {
	if x != nil {
		return x.Postgres
	}
	return nil
}

func (x *DbConfig) GetSqlserver() *DbSQLServer {
	if x != nil {
		return x.Sqlserver
	}
	return nil
}

func (x *DbConfig) GetSqlite() *DbSQLite {
	if x != nil {
		return x.Sqlite
	}
	return nil
}

type SqlConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 数据类型
	DbType v1.DbType `protobuf:"varint,1,opt,name=db_type,json=dbType,proto3,enum=enums.v1.DbType" json:"db_type,omitempty"`
	// sql语句
	Sql []string `protobuf:"bytes,2,rep,name=sql,proto3" json:"sql,omitempty"`
	// sql文件或者目录
	FilePath      []string `protobuf:"bytes,3,rep,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SqlConfig) Reset() {
	*x = SqlConfig{}
	mi := &file_db_v1_db_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlConfig) ProtoMessage() {}

func (x *SqlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_db_v1_db_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlConfig.ProtoReflect.Descriptor instead.
func (*SqlConfig) Descriptor() ([]byte, []int) {
	return file_db_v1_db_proto_rawDescGZIP(), []int{7}
}

func (x *SqlConfig) GetDbType() v1.DbType {
	if x != nil {
		return x.DbType
	}
	return v1.DbType(0)
}

func (x *SqlConfig) GetSql() []string {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (x *SqlConfig) GetFilePath() []string {
	if x != nil {
		return x.FilePath
	}
	return nil
}

var File_db_v1_db_proto protoreflect.FileDescriptor

const file_db_v1_db_proto_rawDesc = "" +
	"\n" +
	"\x0edb/v1/db.proto\x12\x05db.v1\x1a\x15log/v1/rotation.proto\x1a\x12enums/v1/log.proto\x1a\x11enums/v1/db.proto\"\xc1\x02\n" +
	"\x05DbLog\x12%\n" +
	"\x0eslow_threshold\x18\x01 \x01(\rR\rslowThreshold\x12\"\n" +
	"\x03out\x18\x02 \x01(\x0e2\x10.enums.v1.LogOutR\x03out\x12\x1a\n" +
	"\bcolorful\x18\x03 \x01(\bR\bcolorful\x12<\n" +
	"\x1bignore_record_not_found_err\x18\x04 \x01(\bR\x17ignoreRecordNotFoundErr\x123\n" +
	"\x15parameterized_queries\x18\x05 \x01(\bR\x14parameterizedQueries\x12*\n" +
	"\x05level\x18\x06 \x01(\x0e2\x14.enums.v1.DbLogLevelR\x05level\x122\n" +
	"\brotation\x18\a \x01(\v2\x16.log.v1.RotationConfigR\brotation\"\xa9\x01\n" +
	"\x06DbConn\x12+\n" +
	"\x12conn_max_life_time\x18\x01 \x01(\x05R\x0fconnMaxLifeTime\x12\"\n" +
	"\rmax_idle_time\x18\x02 \x01(\x05R\vmaxIdleTime\x12&\n" +
	"\x0fmax_idle_connes\x18\x03 \x01(\x05R\rmaxIdleConnes\x12&\n" +
	"\x0fmax_open_connes\x18\x04 \x01(\x05R\rmaxOpenConnes\"\x9b\x02\n" +
	"\aDbMysql\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04user\x18\x02 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x04 \x01(\tR\x06dbName\x12\x12\n" +
	"\x04port\x18\x05 \x01(\x05R\x04port\x12\x18\n" +
	"\acharset\x18\x06 \x01(\tR\acharset\x12\x1a\n" +
	"\blocation\x18\a \x01(\tR\blocation\x12!\n" +
	"\fconn_timeout\x18\b \x01(\x05R\vconnTimeout\x12!\n" +
	"\fread_timeout\x18\t \x01(\x05R\vreadTimeout\x12#\n" +
	"\rwrite_timeout\x18\n" +
	" \x01(\x05R\fwriteTimeout\"\xcd\x01\n" +
	"\n" +
	"DbPostgres\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\x12\x19\n" +
	"\bssl_mode\x18\x06 \x01(\bR\asslMode\x12\x1b\n" +
	"\ttime_zone\x18\a \x01(\tR\btimeZone\x12\x16\n" +
	"\x06schema\x18\b \x01(\tR\x06schema\"~\n" +
	"\vDbSQLServer\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\"#\n" +
	"\bDbSQLite\x12\x17\n" +
	"\adb_path\x18\x01 \x01(\tR\x06dbPath\"\xa8\x02\n" +
	"\bDbConfig\x12)\n" +
	"\adb_type\x18\x01 \x01(\x0e2\x10.enums.v1.DbTypeR\x06dbType\x12\x1e\n" +
	"\x03log\x18\x02 \x01(\v2\f.db.v1.DbLogR\x03log\x12!\n" +
	"\x04conn\x18\x03 \x01(\v2\r.db.v1.DbConnR\x04conn\x12$\n" +
	"\x05mysql\x18\x04 \x01(\v2\x0e.db.v1.DbMysqlR\x05mysql\x12-\n" +
	"\bpostgres\x18\x05 \x01(\v2\x11.db.v1.DbPostgresR\bpostgres\x120\n" +
	"\tsqlserver\x18\x06 \x01(\v2\x12.db.v1.DbSQLServerR\tsqlserver\x12'\n" +
	"\x06sqlite\x18\a \x01(\v2\x0f.db.v1.DbSQLiteR\x06sqlite\"e\n" +
	"\tSqlConfig\x12)\n" +
	"\adb_type\x18\x01 \x01(\x0e2\x10.enums.v1.DbTypeR\x06dbType\x12\x10\n" +
	"\x03sql\x18\x02 \x03(\tR\x03sql\x12\x1b\n" +
	"\tfile_path\x18\x03 \x03(\tR\bfilePathBy\n" +
	"\tcom.db.v1B\aDbProtoP\x01Z.github.com/byteflowing/proto/gen/go/db/v1;dbv1\xa2\x02\x03DXX\xaa\x02\x05Db.V1\xca\x02\x05Db\\V1\xe2\x02\x11Db\\V1\\GPBMetadata\xea\x02\x06Db::V1b\x06proto3"

var (
	file_db_v1_db_proto_rawDescOnce sync.Once
	file_db_v1_db_proto_rawDescData []byte
)

func file_db_v1_db_proto_rawDescGZIP() []byte {
	file_db_v1_db_proto_rawDescOnce.Do(func() {
		file_db_v1_db_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_db_v1_db_proto_rawDesc), len(file_db_v1_db_proto_rawDesc)))
	})
	return file_db_v1_db_proto_rawDescData
}

var file_db_v1_db_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_db_v1_db_proto_goTypes = []any{
	(*DbLog)(nil),              // 0: db.v1.DbLog
	(*DbConn)(nil),             // 1: db.v1.DbConn
	(*DbMysql)(nil),            // 2: db.v1.DbMysql
	(*DbPostgres)(nil),         // 3: db.v1.DbPostgres
	(*DbSQLServer)(nil),        // 4: db.v1.DbSQLServer
	(*DbSQLite)(nil),           // 5: db.v1.DbSQLite
	(*DbConfig)(nil),           // 6: db.v1.DbConfig
	(*SqlConfig)(nil),          // 7: db.v1.SqlConfig
	(v1.LogOut)(0),             // 8: enums.v1.LogOut
	(v1.DbLogLevel)(0),         // 9: enums.v1.DbLogLevel
	(*v11.RotationConfig)(nil), // 10: log.v1.RotationConfig
	(v1.DbType)(0),             // 11: enums.v1.DbType
}
var file_db_v1_db_proto_depIdxs = []int32{
	8,  // 0: db.v1.DbLog.out:type_name -> enums.v1.LogOut
	9,  // 1: db.v1.DbLog.level:type_name -> enums.v1.DbLogLevel
	10, // 2: db.v1.DbLog.rotation:type_name -> log.v1.RotationConfig
	11, // 3: db.v1.DbConfig.db_type:type_name -> enums.v1.DbType
	0,  // 4: db.v1.DbConfig.log:type_name -> db.v1.DbLog
	1,  // 5: db.v1.DbConfig.conn:type_name -> db.v1.DbConn
	2,  // 6: db.v1.DbConfig.mysql:type_name -> db.v1.DbMysql
	3,  // 7: db.v1.DbConfig.postgres:type_name -> db.v1.DbPostgres
	4,  // 8: db.v1.DbConfig.sqlserver:type_name -> db.v1.DbSQLServer
	5,  // 9: db.v1.DbConfig.sqlite:type_name -> db.v1.DbSQLite
	11, // 10: db.v1.SqlConfig.db_type:type_name -> enums.v1.DbType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_db_v1_db_proto_init() }
func file_db_v1_db_proto_init() {
	if File_db_v1_db_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_db_v1_db_proto_rawDesc), len(file_db_v1_db_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_v1_db_proto_goTypes,
		DependencyIndexes: file_db_v1_db_proto_depIdxs,
		MessageInfos:      file_db_v1_db_proto_msgTypes,
	}.Build()
	File_db_v1_db_proto = out.File
	file_db_v1_db_proto_goTypes = nil
	file_db_v1_db_proto_depIdxs = nil
}
