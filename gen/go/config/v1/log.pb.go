// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: config/v1/log.proto

package configv1

import (
	v1 "github.com/byteflowing/proto/gen/go/enums/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RotationConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogFile       string                 `protobuf:"bytes,1,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`           // 文件名
	MaxSize       uint32                 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`          // 文件大小，单位M
	MaxAge        uint32                 `protobuf:"varint,3,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`             // 最长保留天数
	MaxBackups    uint32                 `protobuf:"varint,4,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"` // 最多保留分数
	Compress      bool                   `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"`                       // 是否启用压缩
	LocalTime     bool                   `protobuf:"varint,6,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`    // 是否使用本地时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotationConfig) Reset() {
	*x = RotationConfig{}
	mi := &file_config_v1_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotationConfig) ProtoMessage() {}

func (x *RotationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotationConfig.ProtoReflect.Descriptor instead.
func (*RotationConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_log_proto_rawDescGZIP(), []int{0}
}

func (x *RotationConfig) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *RotationConfig) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *RotationConfig) GetMaxAge() uint32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *RotationConfig) GetMaxBackups() uint32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *RotationConfig) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *RotationConfig) GetLocalTime() bool {
	if x != nil {
		return x.LocalTime
	}
	return false
}

type ZapLogOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        v1.LogOut              `protobuf:"varint,1,opt,name=output,proto3,enum=enums.v1.LogOut" json:"output,omitempty"`
	Levels        []v1.LogLevel          `protobuf:"varint,2,rep,packed,name=levels,proto3,enum=enums.v1.LogLevel" json:"levels,omitempty"`
	LogFile       *RotationConfig        `protobuf:"bytes,3,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZapLogOutput) Reset() {
	*x = ZapLogOutput{}
	mi := &file_config_v1_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZapLogOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZapLogOutput) ProtoMessage() {}

func (x *ZapLogOutput) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZapLogOutput.ProtoReflect.Descriptor instead.
func (*ZapLogOutput) Descriptor() ([]byte, []int) {
	return file_config_v1_log_proto_rawDescGZIP(), []int{1}
}

func (x *ZapLogOutput) GetOutput() v1.LogOut {
	if x != nil {
		return x.Output
	}
	return v1.LogOut(0)
}

func (x *ZapLogOutput) GetLevels() []v1.LogLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *ZapLogOutput) GetLogFile() *RotationConfig {
	if x != nil {
		return x.LogFile
	}
	return nil
}

type ZapLogKeyConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameKey       string                 `protobuf:"bytes,1,opt,name=name_key,json=nameKey,proto3" json:"name_key,omitempty"`
	LevelKey      string                 `protobuf:"bytes,2,opt,name=level_key,json=levelKey,proto3" json:"level_key,omitempty"`
	MessageKey    string                 `protobuf:"bytes,3,opt,name=message_key,json=messageKey,proto3" json:"message_key,omitempty"`
	TimeKey       string                 `protobuf:"bytes,4,opt,name=time_key,json=timeKey,proto3" json:"time_key,omitempty"`
	CallerKey     string                 `protobuf:"bytes,5,opt,name=caller_key,json=callerKey,proto3" json:"caller_key,omitempty"`
	StackTraceKey string                 `protobuf:"bytes,6,opt,name=stack_trace_key,json=stackTraceKey,proto3" json:"stack_trace_key,omitempty"`
	FunctionKey   string                 `protobuf:"bytes,7,opt,name=function_key,json=functionKey,proto3" json:"function_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZapLogKeyConfig) Reset() {
	*x = ZapLogKeyConfig{}
	mi := &file_config_v1_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZapLogKeyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZapLogKeyConfig) ProtoMessage() {}

func (x *ZapLogKeyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZapLogKeyConfig.ProtoReflect.Descriptor instead.
func (*ZapLogKeyConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_log_proto_rawDescGZIP(), []int{2}
}

func (x *ZapLogKeyConfig) GetNameKey() string {
	if x != nil {
		return x.NameKey
	}
	return ""
}

func (x *ZapLogKeyConfig) GetLevelKey() string {
	if x != nil {
		return x.LevelKey
	}
	return ""
}

func (x *ZapLogKeyConfig) GetMessageKey() string {
	if x != nil {
		return x.MessageKey
	}
	return ""
}

func (x *ZapLogKeyConfig) GetTimeKey() string {
	if x != nil {
		return x.TimeKey
	}
	return ""
}

func (x *ZapLogKeyConfig) GetCallerKey() string {
	if x != nil {
		return x.CallerKey
	}
	return ""
}

func (x *ZapLogKeyConfig) GetStackTraceKey() string {
	if x != nil {
		return x.StackTraceKey
	}
	return ""
}

func (x *ZapLogKeyConfig) GetFunctionKey() string {
	if x != nil {
		return x.FunctionKey
	}
	return ""
}

type ZapLogConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Mode               v1.LogMode             `protobuf:"varint,1,opt,name=mode,proto3,enum=enums.v1.LogMode" json:"mode,omitempty"`
	Format             v1.LogFormat           `protobuf:"varint,2,opt,name=format,proto3,enum=enums.v1.LogFormat" json:"format,omitempty"`
	Level              v1.LogLevel            `protobuf:"varint,3,opt,name=level,proto3,enum=enums.v1.LogLevel" json:"level,omitempty"`
	ReportCaller       bool                   `protobuf:"varint,4,opt,name=report_caller,json=reportCaller,proto3" json:"report_caller,omitempty"`
	ShortCaller        bool                   `protobuf:"varint,5,opt,name=short_caller,json=shortCaller,proto3" json:"short_caller,omitempty"`
	CallerSkip         int32                  `protobuf:"varint,6,opt,name=caller_skip,json=callerSkip,proto3" json:"caller_skip,omitempty"`
	AddStackTraceLevel v1.LogLevel            `protobuf:"varint,7,opt,name=add_stack_trace_level,json=addStackTraceLevel,proto3,enum=enums.v1.LogLevel" json:"add_stack_trace_level,omitempty"`
	ServiceName        string                 `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// 如果需要将logId放入ctx中
	// 设置这个key，调用Ctx开头的日志记录方法会去ctx中查找logID,然后一并记录到日志中
	CtxLogIdKey string `protobuf:"bytes,9,opt,name=ctx_log_id_key,json=ctxLogIdKey,proto3" json:"ctx_log_id_key,omitempty"`
	// log_id在日志中的field名称
	LogIdKey string           `protobuf:"bytes,10,opt,name=log_id_key,json=logIdKey,proto3" json:"log_id_key,omitempty"`
	Keys     *ZapLogKeyConfig `protobuf:"bytes,11,opt,name=keys,proto3" json:"keys,omitempty"`
	// 是否将所有错误日志记录，默认只记录非业务逻辑产生的错误日志
	RecordAllErrors bool            `protobuf:"varint,12,opt,name=record_all_errors,json=recordAllErrors,proto3" json:"record_all_errors,omitempty"`
	Outputs         []*ZapLogOutput `protobuf:"bytes,13,rep,name=outputs,proto3" json:"outputs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ZapLogConfig) Reset() {
	*x = ZapLogConfig{}
	mi := &file_config_v1_log_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZapLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZapLogConfig) ProtoMessage() {}

func (x *ZapLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_log_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZapLogConfig.ProtoReflect.Descriptor instead.
func (*ZapLogConfig) Descriptor() ([]byte, []int) {
	return file_config_v1_log_proto_rawDescGZIP(), []int{3}
}

func (x *ZapLogConfig) GetMode() v1.LogMode {
	if x != nil {
		return x.Mode
	}
	return v1.LogMode(0)
}

func (x *ZapLogConfig) GetFormat() v1.LogFormat {
	if x != nil {
		return x.Format
	}
	return v1.LogFormat(0)
}

func (x *ZapLogConfig) GetLevel() v1.LogLevel {
	if x != nil {
		return x.Level
	}
	return v1.LogLevel(0)
}

func (x *ZapLogConfig) GetReportCaller() bool {
	if x != nil {
		return x.ReportCaller
	}
	return false
}

func (x *ZapLogConfig) GetShortCaller() bool {
	if x != nil {
		return x.ShortCaller
	}
	return false
}

func (x *ZapLogConfig) GetCallerSkip() int32 {
	if x != nil {
		return x.CallerSkip
	}
	return 0
}

func (x *ZapLogConfig) GetAddStackTraceLevel() v1.LogLevel {
	if x != nil {
		return x.AddStackTraceLevel
	}
	return v1.LogLevel(0)
}

func (x *ZapLogConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ZapLogConfig) GetCtxLogIdKey() string {
	if x != nil {
		return x.CtxLogIdKey
	}
	return ""
}

func (x *ZapLogConfig) GetLogIdKey() string {
	if x != nil {
		return x.LogIdKey
	}
	return ""
}

func (x *ZapLogConfig) GetKeys() *ZapLogKeyConfig {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ZapLogConfig) GetRecordAllErrors() bool {
	if x != nil {
		return x.RecordAllErrors
	}
	return false
}

func (x *ZapLogConfig) GetOutputs() []*ZapLogOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_config_v1_log_proto protoreflect.FileDescriptor

const file_config_v1_log_proto_rawDesc = "" +
	"\n" +
	"\x13config/v1/log.proto\x12\tconfig.v1\x1a\x12enums/v1/log.proto\"\xbb\x01\n" +
	"\x0eRotationConfig\x12\x19\n" +
	"\blog_file\x18\x01 \x01(\tR\alogFile\x12\x19\n" +
	"\bmax_size\x18\x02 \x01(\rR\amaxSize\x12\x17\n" +
	"\amax_age\x18\x03 \x01(\rR\x06maxAge\x12\x1f\n" +
	"\vmax_backups\x18\x04 \x01(\rR\n" +
	"maxBackups\x12\x1a\n" +
	"\bcompress\x18\x05 \x01(\bR\bcompress\x12\x1d\n" +
	"\n" +
	"local_time\x18\x06 \x01(\bR\tlocalTime\"\x9a\x01\n" +
	"\fZapLogOutput\x12(\n" +
	"\x06output\x18\x01 \x01(\x0e2\x10.enums.v1.LogOutR\x06output\x12*\n" +
	"\x06levels\x18\x02 \x03(\x0e2\x12.enums.v1.LogLevelR\x06levels\x124\n" +
	"\blog_file\x18\x03 \x01(\v2\x19.config.v1.RotationConfigR\alogFile\"\xef\x01\n" +
	"\x0fZapLogKeyConfig\x12\x19\n" +
	"\bname_key\x18\x01 \x01(\tR\anameKey\x12\x1b\n" +
	"\tlevel_key\x18\x02 \x01(\tR\blevelKey\x12\x1f\n" +
	"\vmessage_key\x18\x03 \x01(\tR\n" +
	"messageKey\x12\x19\n" +
	"\btime_key\x18\x04 \x01(\tR\atimeKey\x12\x1d\n" +
	"\n" +
	"caller_key\x18\x05 \x01(\tR\tcallerKey\x12&\n" +
	"\x0fstack_trace_key\x18\x06 \x01(\tR\rstackTraceKey\x12!\n" +
	"\ffunction_key\x18\a \x01(\tR\vfunctionKey\"\xb1\x04\n" +
	"\fZapLogConfig\x12%\n" +
	"\x04mode\x18\x01 \x01(\x0e2\x11.enums.v1.LogModeR\x04mode\x12+\n" +
	"\x06format\x18\x02 \x01(\x0e2\x13.enums.v1.LogFormatR\x06format\x12(\n" +
	"\x05level\x18\x03 \x01(\x0e2\x12.enums.v1.LogLevelR\x05level\x12#\n" +
	"\rreport_caller\x18\x04 \x01(\bR\freportCaller\x12!\n" +
	"\fshort_caller\x18\x05 \x01(\bR\vshortCaller\x12\x1f\n" +
	"\vcaller_skip\x18\x06 \x01(\x05R\n" +
	"callerSkip\x12E\n" +
	"\x15add_stack_trace_level\x18\a \x01(\x0e2\x12.enums.v1.LogLevelR\x12addStackTraceLevel\x12!\n" +
	"\fservice_name\x18\b \x01(\tR\vserviceName\x12#\n" +
	"\x0ectx_log_id_key\x18\t \x01(\tR\vctxLogIdKey\x12\x1c\n" +
	"\n" +
	"log_id_key\x18\n" +
	" \x01(\tR\blogIdKey\x12.\n" +
	"\x04keys\x18\v \x01(\v2\x1a.config.v1.ZapLogKeyConfigR\x04keys\x12*\n" +
	"\x11record_all_errors\x18\f \x01(\bR\x0frecordAllErrors\x121\n" +
	"\aoutputs\x18\r \x03(\v2\x17.config.v1.ZapLogOutputR\aoutputsB\x96\x01\n" +
	"\rcom.config.v1B\bLogProtoP\x01Z6github.com/byteflowing/proto/gen/go/config/v1;configv1\xa2\x02\x03CXX\xaa\x02\tConfig.V1\xca\x02\tConfig\\V1\xe2\x02\x15Config\\V1\\GPBMetadata\xea\x02\n" +
	"Config::V1b\x06proto3"

var (
	file_config_v1_log_proto_rawDescOnce sync.Once
	file_config_v1_log_proto_rawDescData []byte
)

func file_config_v1_log_proto_rawDescGZIP() []byte {
	file_config_v1_log_proto_rawDescOnce.Do(func() {
		file_config_v1_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_v1_log_proto_rawDesc), len(file_config_v1_log_proto_rawDesc)))
	})
	return file_config_v1_log_proto_rawDescData
}

var file_config_v1_log_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_config_v1_log_proto_goTypes = []any{
	(*RotationConfig)(nil),  // 0: config.v1.RotationConfig
	(*ZapLogOutput)(nil),    // 1: config.v1.ZapLogOutput
	(*ZapLogKeyConfig)(nil), // 2: config.v1.ZapLogKeyConfig
	(*ZapLogConfig)(nil),    // 3: config.v1.ZapLogConfig
	(v1.LogOut)(0),          // 4: enums.v1.LogOut
	(v1.LogLevel)(0),        // 5: enums.v1.LogLevel
	(v1.LogMode)(0),         // 6: enums.v1.LogMode
	(v1.LogFormat)(0),       // 7: enums.v1.LogFormat
}
var file_config_v1_log_proto_depIdxs = []int32{
	4, // 0: config.v1.ZapLogOutput.output:type_name -> enums.v1.LogOut
	5, // 1: config.v1.ZapLogOutput.levels:type_name -> enums.v1.LogLevel
	0, // 2: config.v1.ZapLogOutput.log_file:type_name -> config.v1.RotationConfig
	6, // 3: config.v1.ZapLogConfig.mode:type_name -> enums.v1.LogMode
	7, // 4: config.v1.ZapLogConfig.format:type_name -> enums.v1.LogFormat
	5, // 5: config.v1.ZapLogConfig.level:type_name -> enums.v1.LogLevel
	5, // 6: config.v1.ZapLogConfig.add_stack_trace_level:type_name -> enums.v1.LogLevel
	2, // 7: config.v1.ZapLogConfig.keys:type_name -> config.v1.ZapLogKeyConfig
	1, // 8: config.v1.ZapLogConfig.outputs:type_name -> config.v1.ZapLogOutput
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_config_v1_log_proto_init() }
func file_config_v1_log_proto_init() {
	if File_config_v1_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_v1_log_proto_rawDesc), len(file_config_v1_log_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_log_proto_goTypes,
		DependencyIndexes: file_config_v1_log_proto_depIdxs,
		MessageInfos:      file_config_v1_log_proto_msgTypes,
	}.Build()
	File_config_v1_log_proto = out.File
	file_config_v1_log_proto_goTypes = nil
	file_config_v1_log_proto_depIdxs = nil
}
